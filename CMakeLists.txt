cmake_minimum_required(VERSION 3.12)
include_directories(${CMAKE_SOURCE_DIR})
include_directories(${CMAKE_BINARY_DIR})

# add feature
option(CODEGPU "codes can be run on GPU" ON)
option(TRCOUNTING "counting the number of triangles" ON)
option(VERBOSE "verbose mode" OFF)
option(OPENMP "use openmp" ON)
option(MPI "enable MPI" OFF)

# add compiler switch
option(PROF "gprofile compilation" OFF)
option(CODE_COVERAGE "Enable coverage reporting" OFF)

# add finer control
set(THREADNUM 8 CACHE STRING "multi thread number, default to 8")

if(CODEGPU)
  project(triangle_counting_gpu_variant CUDA CXX)
else()
  project(triangle_counting_gpu_variant CXX)
endif()
macro(set_flags)
# first argument is option name
# second argument is ON or OFF
  if(${ARGV1})
    set(${ARGV0}_NVTC 1)
  else()
    set(${ARGV0}_NVTC 0)
  endif()
endmacro()
set_flags("VERBOSE" ${VERBOSE})
set_flags("CODEGPU" ${CODEGPU})
set_flags("OPENMP" ${OPENMP})
set_flags("TRCOUNTING" ${TRCOUNTING})
set_flags("MPI" ${MPI})
set(THREADNUM_NVTC ${THREADNUM})
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
if(CODEGPU)
  set(CMAKE_CUDA_STANDARD 11)
  set(CMAKE_CUDA_STANDARD_REQUIRED ON)
endif()
if(OPENMP)
  find_package(OpenMP REQUIRED)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()
if(MPI)
  find_package(MPI REQUIRED)
endif()
add_subdirectory(nvtc)
if(ENABLE_TESTING)
  include(CTest)
  find_package(GTest REQUIRED)
  find_package(Threads REQUIRED)
  add_executable(test_alg test.cpp)
  target_link_libraries(test_alg GTest::GTest GTest::Main nvtc_variant)
  if(CODEGPU)
    target_link_libraries(test_alg nvtc_variant_cu)
  endif()
  add_test(NAME test_alg COMMAND test_alg)
endif()
