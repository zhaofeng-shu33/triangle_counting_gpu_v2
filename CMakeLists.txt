cmake_minimum_required(VERSION 3.12)
include_directories(${CMAKE_SOURCE_DIR})
include_directories(${CMAKE_BINARY_DIR})
option(TIMECOUNTING "counting time used" OFF)
option(CODEGPU "codes can be run on GPU" ON)
option(TRCOUNTING "counting the number of triangles" ON)
option(VERBOSE "verbose mode" OFF)
option(OPENMP "use openmp" ON)
option(PROF "gprofile compilation" OFF)
option(CODE_COVERAGE "Enable coverage reporting" OFF)
option(MPI "enable MPI" OFF)
if(CODEGPU)
  project(triangle_counting_gpu_variant CUDA CXX)
  set(GPU 1)
else()
  project(triangle_counting_gpu_variant CXX)
  set(GPU 0)
endif()
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
if(CODEGPU)
  set(CMAKE_CUDA_STANDARD 11)
  set(CMAKE_CUDA_STANDARD_REQUIRED ON)
endif()
if(TIMECOUNTING)
    add_definitions("-DTIMECOUNTING=1")
endif()
if(OPENMP)
  find_package(OpenMP REQUIRED)
  add_definitions("-DOPENMP=1")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()
if(MPI)
  find_package(MPI REQUIRED)
endif()
add_subdirectory(nvtc)
if(ENABLE_TESTING)
  include(CTest)
  find_package(GTest REQUIRED)
  find_package(Threads REQUIRED)
  add_executable(test_alg test.cpp)
  target_link_libraries(test_alg GTest::GTest GTest::Main nvtc_variant)
  if(CODEGPU)
    target_link_libraries(test_alg nvtc_variant_cu)
  endif()
  add_test(NAME test_alg COMMAND test_alg)
endif()
